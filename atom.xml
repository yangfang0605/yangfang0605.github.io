<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Flora&#39;s blogs</title>
  
  <subtitle>一如既往 万事胜意</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-28T07:23:39.473Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Flora_Yang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020 Happy New Year</title>
    <link href="http://yoursite.com/2019/12/28/2020-Happy-New-Year/"/>
    <id>http://yoursite.com/2019/12/28/2020-Happy-New-Year/</id>
    <published>2019-12-28T07:23:39.000Z</published>
    <updated>2019-12-28T07:23:39.473Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>gitlab仓库的克隆和提交</title>
    <link href="http://yoursite.com/2019/12/24/gitlab%E4%BB%93%E5%BA%93%E7%9A%84%E5%85%8B%E9%9A%86%E5%92%8C%E6%8F%90%E4%BA%A4/"/>
    <id>http://yoursite.com/2019/12/24/gitlab%E4%BB%93%E5%BA%93%E7%9A%84%E5%85%8B%E9%9A%86%E5%92%8C%E6%8F%90%E4%BA%A4/</id>
    <published>2019-12-24T09:43:18.000Z</published>
    <updated>2020-01-16T03:45:18.495Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章作者：杨芳</p><p>简书主页：<a href="https://www.jianshu.com/u/ea9b4c96b097" target="_blank" rel="noopener">https://www.jianshu.com/u/ea9b4c96b097</a></p></blockquote><p>最近开始学习java，学习的过程中总结了从gitlab克隆代码到本地及修改代码后推送到个人库，在由个人库请求合并到主库的整个流程，再此仅是个人笔记。</p><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><p>1、先登录gitlab，左上角查看“项目-您的项目”。</p><p><img src="https://github.com/yangfang0605/YfBlogPicture/blob/master/GitlabLogin.png?raw=true" alt="gitlab登录界面"></p><p>2、项目后面为“开发人员”代表主库，“主程序员”代表个人库；点击“派生”可fork这个项目（主库），成功以后会在你的项目中出现你自己的项目（个人库），一般命名为：用户名/项目名。</p><p><img src="https://github.com/yangfang0605/YfBlogPicture/blob/master/MainPersonalfork.png?raw=true" alt="主库与个人库"></p><p>3、进入主库后，右上角“克隆”点开就可以看到使用HTTP克隆，个人库同理，也就是我们接下来要用到的HTTP克隆地址。</p><p><img src="https://github.com/yangfang0605/YfBlogPicture/blob/master/HttpFork.png?raw=true" alt="HTTP克隆"></p><h2 id="二、gitlab克隆代码到本地"><a href="#二、gitlab克隆代码到本地" class="headerlink" title="二、gitlab克隆代码到本地"></a>二、gitlab克隆代码到本地</h2><p>打开自己想要克隆代码的工作文件夹，右键git bash here。</p><h3 id="1、克隆个人库代码到本地（此处为HTTP克隆）"><a href="#1、克隆个人库代码到本地（此处为HTTP克隆）" class="headerlink" title="1、克隆个人库代码到本地（此处为HTTP克隆）"></a>1、克隆个人库代码到本地（此处为HTTP克隆）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#克隆代码到本地</span></span><br><span class="line">$ git <span class="built_in">clone</span> http://XXX个人库XXX.git</span><br></pre></td></tr></table></figure><h3 id="2、cd进入项目文件夹"><a href="#2、cd进入项目文件夹" class="headerlink" title="2、cd进入项目文件夹"></a>2、cd进入项目文件夹</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> XXXXXX</span><br></pre></td></tr></table></figure><h3 id="3、查看本地和远程主机的全部分支（可不执行）"><a href="#3、查看本地和远程主机的全部分支（可不执行）" class="headerlink" title="3、查看本地和远程主机的全部分支（可不执行）"></a>3、查看本地和远程主机的全部分支（可不执行）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -a</span><br></pre></td></tr></table></figure><h3 id="4、将该Gitlab版本仓库添加到本机的远程列表中，upstream是主库名称可自定义"><a href="#4、将该Gitlab版本仓库添加到本机的远程列表中，upstream是主库名称可自定义" class="headerlink" title="4、将该Gitlab版本仓库添加到本机的远程列表中，upstream是主库名称可自定义"></a>4、将该Gitlab版本仓库添加到本机的远程列表中，upstream是主库名称可自定义</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add upstream http://XXX主库XXX.git</span><br></pre></td></tr></table></figure><h3 id="5、更新主库代码：pull更新，以防在开发过程中，远程被别人更新过新版本代码，upstream与上一步自己填写的主库名称保持一致"><a href="#5、更新主库代码：pull更新，以防在开发过程中，远程被别人更新过新版本代码，upstream与上一步自己填写的主库名称保持一致" class="headerlink" title="5、更新主库代码：pull更新，以防在开发过程中，远程被别人更新过新版本代码，upstream与上一步自己填写的主库名称保持一致"></a>5、更新主库代码：pull更新，以防在开发过程中，远程被别人更新过新版本代码，upstream与上一步自己填写的主库名称保持一致</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull upstream master</span><br></pre></td></tr></table></figure><h3 id="6、查看当前远程仓库"><a href="#6、查看当前远程仓库" class="headerlink" title="6、查看当前远程仓库"></a>6、查看当前远程仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h2 id="三、本地提交修改代码到个人库"><a href="#三、本地提交修改代码到个人库" class="headerlink" title="三、本地提交修改代码到个人库"></a>三、本地提交修改代码到个人库</h2><h3 id="1、右键git-bash-here，cd到或者打开XXXX盘目录，右键git-bash-here"><a href="#1、右键git-bash-here，cd到或者打开XXXX盘目录，右键git-bash-here" class="headerlink" title="1、右键git bash here，cd到或者打开XXXX盘目录，右键git bash here"></a>1、右键git bash here，cd到或者打开XXXX盘目录，右键git bash here</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> XXXXXX</span><br></pre></td></tr></table></figure><h3 id="2、用于显示工作目录和暂存区的状态，红色部分为自己本地修改的代码文件路径"><a href="#2、用于显示工作目录和暂存区的状态，红色部分为自己本地修改的代码文件路径" class="headerlink" title="2、用于显示工作目录和暂存区的状态，红色部分为自己本地修改的代码文件路径"></a>2、用于显示工作目录和暂存区的状态，红色部分为自己本地修改的代码文件路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><h3 id="3、需要先更新主库代码：pull更新，upstream为克隆时候自定义的主库名称"><a href="#3、需要先更新主库代码：pull更新，upstream为克隆时候自定义的主库名称" class="headerlink" title="3、需要先更新主库代码：pull更新，upstream为克隆时候自定义的主库名称"></a>3、需要先更新主库代码：pull更新，upstream为克隆时候自定义的主库名称</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull upstream master</span><br></pre></td></tr></table></figure><h3 id="4、查看代码状态，红色部分为自己本地修改的代码文件路径"><a href="#4、查看代码状态，红色部分为自己本地修改的代码文件路径" class="headerlink" title="4、查看代码状态，红色部分为自己本地修改的代码文件路径"></a>4、查看代码状态，红色部分为自己本地修改的代码文件路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#单个提交修改的文件</span></span><br><span class="line">$ git add【红色部分的url】</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#批量提交全部修改（不确定会出问题的话建议不要用）</span></span><br><span class="line">$ git add .</span><br></pre></td></tr></table></figure><h3 id="5、用于显示工作目录和暂存区的状态，绿色部分为提交成功的部分"><a href="#5、用于显示工作目录和暂存区的状态，绿色部分为提交成功的部分" class="headerlink" title="5、用于显示工作目录和暂存区的状态，绿色部分为提交成功的部分"></a>5、用于显示工作目录和暂存区的状态，绿色部分为提交成功的部分</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><h3 id="6、用于显示工作目录和暂存区的状态，绿色部分为提交成功的部分"><a href="#6、用于显示工作目录和暂存区的状态，绿色部分为提交成功的部分" class="headerlink" title="6、用于显示工作目录和暂存区的状态，绿色部分为提交成功的部分"></a>6、用于显示工作目录和暂存区的状态，绿色部分为提交成功的部分</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">"自己想写的提交备注"</span></span><br></pre></td></tr></table></figure><h3 id="7、本地修改后提交到个人库-push推送"><a href="#7、本地修改后提交到个人库-push推送" class="headerlink" title="7、本地修改后提交到个人库:push推送"></a>7、本地修改后提交到个人库:push推送</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;文章作者：杨芳&lt;/p&gt;
&lt;p&gt;简书主页：&lt;a href=&quot;https://www.jianshu.com/u/ea9b4c96b097&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>软件测试面试题整理（一）</title>
    <link href="http://yoursite.com/2019/11/26/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/11/26/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2019-11-26T12:18:10.000Z</published>
    <updated>2019-12-28T07:14:29.027Z</updated>
    
    <content type="html"><![CDATA[<p>声明:以下是我在查资料学习软件测试面试过程中觉得很有用的资料，来自于微信公众号“软件测试资源分享”的面试题整理，自己也想收录能够及时复习，所以将以下整理在这，因为才加入博客很多规则不清楚，如果有侵权可以联系我及时处理。</p><hr><h4 id="您认为做好测试用例设计工作的关键是什么？"><a href="#您认为做好测试用例设计工作的关键是什么？" class="headerlink" title="您认为做好测试用例设计工作的关键是什么？"></a><span style='color:orange'><strong>您认为做好测试用例设计工作的关键是什么？</strong></span></h4><p>测试用例应百分百覆盖需求。</p><p>白盒测试用例设计的关键是以较少的用例覆盖尽可能多的内部程序逻辑结果。</p><p>黑盒测试用例设计的关键也是以较少的用例覆盖模块输出和输入接口。不可能做到完全测试，以最少的用例在合理的时间内发现最多的问题。</p><hr><h4 id="您所熟悉的测试用例设计方法都有哪些？请分别以具体的例子来说明这些方法在测试用例设计工作中的应用"><a href="#您所熟悉的测试用例设计方法都有哪些？请分别以具体的例子来说明这些方法在测试用例设计工作中的应用" class="headerlink" title="您所熟悉的测试用例设计方法都有哪些？请分别以具体的例子来说明这些方法在测试用例设计工作中的应用."></a><span style='color:orange'><strong>您所熟悉的测试用例设计方法都有哪些？请分别以具体的例子来说明这些方法在测试用例设计工作中的应用.</strong></span></h4><p>1．等价类划分 </p><p>等价类是指某个输入域的子集合。在该子集合中，各个输入数据对于揭露程序中的错误都是等效的。并合理地假定：测试某等价类的代表值就等于对这一类其它值的测试。因此，可以把全部输入数据合理划分为若干等价类，在每一个等价类中取一个数据作为测试的输入条件，就可以用少量代表性的测试数据，取得较好的测试结果。等价类划分可有两种不同的情况：有效等价类和无效等价类.。</p><p>2．边界值分析法</p><p>边界值分析方法是对等价类划分方法的补充。测试工作经验告诉我,大量的错误是发生在输入或输出范围的边界上，而不是发生在输入输出范围的内部。因此针对各种边界情况设计测试用例，可以查出更多的错误。使用边界值分析方法设计测试用例，首先应确定边界情况。通常输入和输出等价类的边界，就是应着重测试的边界情况。应当选取正好等于，刚刚大于或刚刚小于边界的值作为测试数据，而不是选取等价类中的典型值或任意值作为测试数据。</p><p>3．错误推测法</p><p>基于经验和直觉推测程序中所有可能存在的各种错误， 从而有针对性的设计测试用例的方法。 错误推测方法的基本思想： 列举出程序中所有可能有的错误和容易发生错误的特殊情况，根据他们选择测试用例. 例如， 在单元测试时曾列出的许多在模块中常见的错误。 以前产品测试中曾经发现的错误等，这些就是经验的总结。 还有，输入数据和输出数据为0的情况。 输入表格为空格或输入表格只有一行， 这些都是容易发生错误的情况， 可选择这些情况下的例子作为测试用例。</p><p>4．因果图方法</p><p>前面介绍的等价类划分方法和边界值分析方法,都是着重考虑输入条件，但未考虑输入条件之间的联系， 相互组合等。 考虑输入条件之间的相互组合，可能会产生一些新的情况， 但要检查输入条件的组合不是一件容易的事情，, 即使把所有输入条件划分成等价类，他们之间的组合情况也相当多， 因此必须考虑采用一种适合于描述对于多种条件的组合，,相应产生多个动作的形式来考虑设计测试用例， 这就需要利用因果图（逻辑模型）。 因果图方法最终生成的就是判定表， 它适合于检查程序输入条件的各种组合情况。</p><hr><h4 id="我现在有个程序，发现在Windows上运行得很慢，怎么判别是程序存在问题还是软硬件系统存在问题？"><a href="#我现在有个程序，发现在Windows上运行得很慢，怎么判别是程序存在问题还是软硬件系统存在问题？" class="headerlink" title="我现在有个程序，发现在Windows上运行得很慢，怎么判别是程序存在问题还是软硬件系统存在问题？"></a><span style='color:orange'>我现在有个程序，发现在Windows上运行得很慢，怎么判别是程序存在问题还是软硬件系统存在问题？</span></h4><p>首先看该程序内存消耗以及CPU占用情况是否正常，再看它的句柄数是否有异常，如果句柄数很大有明显异常说明该程序有问题。然后可以将该程序安装到其他服务器中，看运行速度是否正常，如果是正常，说明是之前服务器本身软硬件性能不行</p><p>1、检查系统是否有中毒的特征； 2、检查软件/硬件的配置是否符合软件的推荐标准； 3、确认当前的系统是否是独立，即没有对外提供什么消耗CPU资源的服务； 4、如果是C/S或者B/S结构的软件，需要检查是不是因为与服务器的连接有问题，或者访问有问题造成的； 5、在系统没有任何负载的情况下，查看性能监视器，确认应用程序对CPU/内存的访问情况。</p><hr><h4 id="什么是并发？在lordrunner中，如何进行并发的测试？集合点失败了会怎么样？"><a href="#什么是并发？在lordrunner中，如何进行并发的测试？集合点失败了会怎么样？" class="headerlink" title="什么是并发？在lordrunner中，如何进行并发的测试？集合点失败了会怎么样？"></a><span style='color:orange'>什么是并发？在lordrunner中，如何进行并发的测试？集合点失败了会怎么样？</span></h4><p>在同一时间点，支持多个不同的操作。 LoadRunner中提供IP伪装，集合点，配合虚拟用户的设计，以及在多台电脑上设置，可以比较好的模拟真实的并发。 集合点，即是多个用户在某个时刻，某个特定的环境下同时进行虚拟用户的操作的。集合点失败，则集合点的才操作就会取消，测试就不能进行。</p><hr><h4 id="写出bug报告当中一些必备的内容。"><a href="#写出bug报告当中一些必备的内容。" class="headerlink" title="写出bug报告当中一些必备的内容。"></a><span style='color:orange'>写出bug报告当中一些必备的内容。</span></h4><p>硬件平台和操作系统 测试应用的硬件平台（Platform），通常选择“PC”。 测试应用的操作系统平台（OS）。 a) 版本 提交缺陷报告时通过该字段标识此缺陷存在于被测试软件的哪个版本。 b) Bug报告优先级 c) Bug状态 d) Bug的编号 e) 发现人 f) 提交人 g) 指定处理人 h) 概述 i) 从属关系 j) 详细描述 k) 严重程度 l) 所属模块 m) 附件 n) 提交日期</p><p>提交bug需要，标题、时间、版本号、发现人、提交人、修复人、重现步骤、实际步骤、预期步骤、bug优先级和严重程度、bug状态、截图！</p><hr><h4 id="简述一下缺陷的生命周期"><a href="#简述一下缺陷的生命周期" class="headerlink" title="简述一下缺陷的生命周期"></a><span style='color:orange'>简述一下缺陷的生命周期</span></h4><p>发现-&gt;提交-&gt;确认-&gt;分配-&gt;修复-&gt;验证-&gt;关闭</p><hr><h4 id="判断题"><a href="#判断题" class="headerlink" title="判断题"></a><span style='color:orange'>判断题</span></h4><p>（a）发现错误是软件测试的目的（F） </p><p>（b）白盒测试可以找出软件遗漏功能和代码错误功能。（F）</p><p>（c）在设计测试用例时，应包括合理的应用条件和不合理的应用条件。 （T）</p><p>（d）软件缺陷一定是由编码引起的错误。 （F） </p><p>（e）文档测试是对系统提交给用户的文档进行验证，并不是一般性的审查活动。（T）</p><hr><h4 id="如何编写提交给用户的测试报告？"><a href="#如何编写提交给用户的测试报告？" class="headerlink" title="如何编写提交给用户的测试报告？"></a><span style='color:orange'>如何编写提交给用户的测试报告？</span></h4><p>测试报告一般分为内部测试报告和外部测试报告。内部报告是我们在测试工作中的项目文档，反映了测试工作的实施情况，这里不过多讨论，读者可以参考相关教材。这里主要讨论一下外部测试报告的写法，一般外部测试报告要满足下面几个要求： -根据内部测试报告进行编写，一般可以摘录； -不可以向客户报告严重缺陷，即使是已经修改的缺陷，开发中的缺陷也没有必要让客户知道； -报告上可以列出一些缺陷，但必须是中级的缺陷，而且这些缺陷必须是修复的； -报告上面的内容尽量要真实可靠； -整个测试报告要仔细审阅，力争不给项目带来负面作用，尤其是性能测试报告。 总之，外部测试报告要小心谨慎的编写。</p><hr><h4 id="测试产品与测试项目的区别是什么？"><a href="#测试产品与测试项目的区别是什么？" class="headerlink" title="测试产品与测试项目的区别是什么？"></a><span style='color:orange'>测试产品与测试项目的区别是什么？</span></h4><p>习惯上把开发完成后进行商业化、几乎不进行代码修改就可以售给用户使用的软件成为软件产品，也就是可以买“卖拷贝”的软件，例如Windows2000。而通常把针对一个或者几个特定的用户而开发的软件成为软件项目，软件项目是一种个性化的产品，可以是按照用户要求全部重新开发，也可以修改已有的软件产品来满足特定的用户需求。项目和产品的不同特点，决定我们测试产品和测试项目仍然会有很多不同的地方： -质量要求不同。通常产品的质量要高一些，修复发布后产品的缺陷成本较高，甚至会带来很多负面的影响。而做项目通常面向某一用户，虽然质量越高越好，但是一般只要满足用户要求就可以了。 -测试资源投入多少不同。做软件产品通常是研发中心来开发，进度压力要小些。同时由于质量要求高，因此会投入较多的人力、物力资源。 -项目最后要和用户共同验收测试，这是产品测试不具有的特点。 此外，测试产品与测试项目在缺陷管理方面、测试策略制定都会有很大不同，测试管理者应该结合具体的环境，恰如其分的完成工作。</p><p>测试项目之后，测试人员在项目结束之后不用跟进然后投入到下一个项目中，测试产品需要测试人员不断的跟进每一个迭代过程。</p><hr><h4 id="没有产品说明书和需求文档地情况下能够进行黑盒测试吗？"><a href="#没有产品说明书和需求文档地情况下能够进行黑盒测试吗？" class="headerlink" title="没有产品说明书和需求文档地情况下能够进行黑盒测试吗？"></a><span style='color:orange'>没有产品说明书和需求文档地情况下能够进行黑盒测试吗？</span></h4><p>这个问题是国内测试工程师经常遇到的问题，根源就是国内软件开发文档管理不规范，对变更的管理方法就更不合理了。实际上没有任何文档的时候，测试人员是能够进行黑盒测试的，这种测试方式我们可以称之为探索测试，具体做法就是测试工程师根据自己的专业技能、领域知识等不断的深入了解测试对象、理解软件功能，进而发现缺陷。 在这种做法基本上把软件当成了产品说明书，测试过程中要和开发人员不断的进行交流。尤其在作项目的时候，进度压力比较大，可以作为加急测试方案。最大的风险是不知道有些特性是否被遗漏。</p><hr><h4 id="在测试一个web页面时，页面显示为空白页，如何定位问题所在？可能是哪些原因引起的？"><a href="#在测试一个web页面时，页面显示为空白页，如何定位问题所在？可能是哪些原因引起的？" class="headerlink" title="在测试一个web页面时，页面显示为空白页，如何定位问题所在？可能是哪些原因引起的？"></a><span style='color:orange'>在测试一个web页面时，页面显示为空白页，如何定位问题所在？可能是哪些原因引起的？</span></h4><p>1、本身页面代码就是空白的。浏览器按F12查看 2，本地无网络，浏览器是否缓存是否为空白页 3，发送超时，接收超时，服务器超时。 4，域名错误，ip解析不了。</p><p>首先打开F12 刷新一下页面，看一下有没有请求接口，没有请求接口可能是网络或者前端代码的原因，请求了接口，查看接口返回的是不是空，如果是空的，那就是接口数据的问题，如果接口的数据没问题，问一下服务停了</p><hr><h4 id="软件的评审一般由哪些人参加？其目的是什么？"><a href="#软件的评审一般由哪些人参加？其目的是什么？" class="headerlink" title="软件的评审一般由哪些人参加？其目的是什么？"></a><span style='color:orange'>软件的评审一般由哪些人参加？其目的是什么？</span></h4><p>在正式的会议上将软件项目的成果（包括各阶段的文档、产生的代码等）提交给用户、客户或有关部门人员对软件产品进行评审和批准。其目的是找出可能影响软件产品质量、开发过程、维护工作的适用性和环境方面的设计缺陷，并采取补救措施，以及找出在性能、安全性和经济方面的可能的改进。 人员：用户、客户或有关部门开发人员，测试人员，需求分析师都可以，就看处于评审那个阶段</p><hr><h4 id="描述测试用例设计的完整过程？"><a href="#描述测试用例设计的完整过程？" class="headerlink" title="描述测试用例设计的完整过程？"></a><span style='color:orange'>描述测试用例设计的完整过程？</span></h4><p>需求分析 + 需求变更的维护工作； 根据需求 得出测试需求； 设计测试方案，评审测试方案； 方案评审通过后，设计测试用例，再对测试用例进行评审；</p><hr><h4 id="面试官问用安卓系统和ios系统进行软件测试，会有哪些不同"><a href="#面试官问用安卓系统和ios系统进行软件测试，会有哪些不同" class="headerlink" title="面试官问用安卓系统和ios系统进行软件测试，会有哪些不同?"></a><span style='color:orange'>面试官问用安卓系统和ios系统进行软件测试，会有哪些不同?</span></h4><p>App测试中ios和Android有哪些区别呢？ 1 . Android长按home键呼出应用列表和切换应用，然后右滑则终止应用； 2. 多分辨率测试，Android端20多种，ios较少； 3. 手机操作系统，Android较多，ios较少且不能降级，只能单向升级；新的ios系统中的资源库不能完全兼容低版本中的ios系统中的应用，低版本ios系统中的应用调用了新的资源库，会直接导致闪退（Crash）； 4. 操作习惯：Android，Back键是否被重写，测试点击Back键后的反馈是否正确；应用数据从内存移动到SD卡后能否正常运行等； 5. push测试：Android：点击home键，程序后台运行时，此时接收到push，点击后唤醒应用，此时是否可以正确跳转；ios，点击home键关闭程序和屏幕锁屏的情况（红点的显示）； 6. 安装卸载测试：Android的下载和安装的平台和工具和渠道比较多，ios主要有app store，iTunes和testflight下载； 7. 升级测试：可以被升级的必要条件：新旧版本具有相同的签名；新旧版本具有相同的包名；有一个标示符区分新旧版本（如版本号），对于Android若有内置的应用需检查升级之后内置文件是否匹配（如内置的输入法）</p><hr><h4 id="LoadRunner分哪三部分？"><a href="#LoadRunner分哪三部分？" class="headerlink" title="LoadRunner分哪三部分？"></a><span style='color:orange'>LoadRunner分哪三部分？</span></h4><p>用户动作设计； 场景设计； 测试数据分析；</p><hr><h4 id="数据库内联接和外连接，自联接有什么区别？"><a href="#数据库内联接和外连接，自联接有什么区别？" class="headerlink" title="数据库内联接和外连接，自联接有什么区别？"></a><span style='color:orange'>数据库内联接和外连接，自联接有什么区别？</span></h4><p>内联接通常是2个表存在主外键关系时使用的， 内联接查询有2种方式实现， 1是在WHERE 子句中指定联接条件 2是在FROM子句中使用join…on 内联接查询通常不仅仅联接2表，可以3表甚至更多的表 参与内联接的表的地位是平等的 而外联接中参与联接的表有主从之分。以主表的每行数据去匹配从表的数据列，符合条件的数据将直接返回到结果集中，不符合的用NULL（空值）填充后再返回到结果集中</p><hr><h4 id="测试计划工作的目的是什么？测试计划工作的内容都包括什么？其中哪些是最重要的？"><a href="#测试计划工作的目的是什么？测试计划工作的内容都包括什么？其中哪些是最重要的？" class="headerlink" title="测试计划工作的目的是什么？测试计划工作的内容都包括什么？其中哪些是最重要的？"></a><span style='color:orange'>测试计划工作的目的是什么？测试计划工作的内容都包括什么？其中哪些是最重要的？</span></h4><p>软件测试计划是指导测试过程的纲领性文件，包含了产品概述、测试策略、测试方法、测试区域、测试配置、测试周期、测试资源、测试交流、风险分析等内容。借助软件测试计划，参与测试的项目成员，尤其是测试管理人员，可以明确测试任务和测试方法，保持测试实施过程的顺畅沟通，跟踪和控制测试进度，应对测试过程中的各种变更。 测试计划和测试详细规格、测试用例之间是战略和战术的关系，测试计划主要从宏观上规划测试活动的范围、方法和资源配置，而测试详细规格、测试用例是完成测试任务的具体战术。所以其中最重要的是测试测试策略和测试方法（最好是能先评审）</p><hr><h4 id="当开发人员说不是BUG时，你如何应付？"><a href="#当开发人员说不是BUG时，你如何应付？" class="headerlink" title="当开发人员说不是BUG时，你如何应付？"></a><span style='color:orange'>当开发人员说不是BUG时，你如何应付？</span></h4><p>开发人员说不是bug，有2种情况，一是需求没有确定，所以我可以这么做，这个时候可以找来产品经理进行确认，需不需要改动，3方商量确定好后再看要不要改。二是这种情况不可能发生，所以不需要修改，这个时候，我可以先尽可能的说出是BUG的依据是什么？如果被用户发现或出了问题，会有什么不良结果？程序员可能会给你很多理由，你可以对他的解释进行反驳。如果还是不行，那我可以给这个问题提出来,跟开发经理和测试经理进行确认,如果要修改就改,如果不要修改就不改。其实有些真的不是bug，我也只是建议的方式写进TD中，如果开发人员不修改也没有大问题。如果确定是bug的话，一定要坚持自己的立场，让问题得到最后的确认。</p><hr><h4 id="如果一个bug只出现一次，该怎么处理？"><a href="#如果一个bug只出现一次，该怎么处理？" class="headerlink" title="如果一个bug只出现一次，该怎么处理？"></a><span style='color:orange'>如果一个bug只出现一次，该怎么处理？</span></h4><p>1）bug出现的同时立即截图留下异常的画面 （2）使用相同的环境、设备、测试步骤、方法，使用相同的输入数据，看能否重 （3）不能重现，则告诉项目经理发现bug的过程，分析优先级，讨论解决方案</p><hr><h4 id="软件测试的缺陷等级如何划分？"><a href="#软件测试的缺陷等级如何划分？" class="headerlink" title="软件测试的缺陷等级如何划分？"></a><span style='color:orange'>软件测试的缺陷等级如何划分？</span></h4><p>A类—严重错误，包括以下各种错误：</p><p>1． 由于程序所引起的死机,非法退出</p><p>2． 死循环</p><p>3． 数据库发生死锁</p><p>4． 因错误操作导致的程序中断</p><p>5． 与数据库连接错误</p><p>6． 数据通讯错误</p><p>B类—较严重错误，包括以下各种错误：</p><p>1.程序接口错误</p><p>2.系统可被执行，但操作功能无法执行（含指令）</p><p>3.单项操作功能可被执行，但在此功能中某些小功能（含指令参数的使用）无法被执行（对系统非致命的）</p><p>4.在小功能项的某些项目（选项）使用无效（对系统非致命的）</p><p>5.业务流程不正确</p><p>6.功能实现不完整，如删除时没有考虑数据关联</p><p>7.功能的实现不正确，如在系统实现的界面上，一些可接受输入的控件点击后无作用；对数据库的操作不能正确实现；</p><p>8.报表格式以及打印内容错误（行列不完整，数据显示不在所对应的行列等导致数据显示结果不正确的错误）</p><p>C类—一般性错误，包括以下各种错误：</p><p>1.操作界面错误（包括数据窗口内列名定义、含义是否一致）</p><p>2.打印内容、格式错误（只影响报表的格式或外观，不影响数据显示结果的错误）</p><p>3.简单的输入限制未放在前台进行控制</p><p>4.删除操作未给出提示</p><p>5.已被捕捉的系统崩溃，不影响继续操作</p><p>6.虽然正确性不受影响，但系统性能和响应时间受到影响</p><p>7.不能定位焦点或定位有误，影响功能实现</p><p>8.显示不正确但输出正确</p><p>9.增删改功能，在本界面不能实现，但在另一界面可以补充实现。</p><p>D类—较小错误，包括以下各种错误：</p><p>1.界面不规范</p><p>2.辅助说明描述不清楚</p><p>3.输入输出不规范</p><p>4.长时间操作未给用户提示</p><p>5.提示窗口文字未采用行业术语</p><p>6.可输入区域和只读区域没有明显的区分标志</p><p>7.必填项与非必填项应加以区别</p><p>8.滚动条无效</p><p>9.键盘支持不好，如在可输入多行的字段中，不支持回车换行；或对相同字段，在不同界面支持不同的快捷方式</p><p>10.界面不能及时刷新，影响功能实现</p><p>E类—其他错误</p><p>1.光标跳转设置不好，鼠标（光标）定位错误</p><p>2.一些建议性问题</p><hr><h4 id="软件的安全性应从哪几个方面去测试？"><a href="#软件的安全性应从哪几个方面去测试？" class="headerlink" title="软件的安全性应从哪几个方面去测试？"></a><span style='color:orange'>软件的安全性应从哪几个方面去测试？</span></h4><p>(1)用户认证机制：如数据证书、智能卡、双重认证、安全电子交易协议 (2)加密机制 (3)安全防护策略：如安全日志、入侵检测、隔离防护、漏洞扫描 (4)数据备份与恢复手段：存储设备、存储优化、存储保护、存储管理 (5)防病毒系统</p><hr><h4 id="逻辑题，一个是一个6L水的水壶，一个5L水的水壶，旁边有一个池塘，如何用这两个水壶，倒出3L水"><a href="#逻辑题，一个是一个6L水的水壶，一个5L水的水壶，旁边有一个池塘，如何用这两个水壶，倒出3L水" class="headerlink" title="逻辑题，一个是一个6L水的水壶，一个5L水的水壶，旁边有一个池塘，如何用这两个水壶，倒出3L水?"></a><span style='color:orange'>逻辑题，一个是一个6L水的水壶，一个5L水的水壶，旁边有一个池塘，如何用这两个水壶，倒出3L水?</span></h4><p>第一步:5升加满全部倒入6升中，5升再加满倒入6升使6升加满，此时6升满5升中剩4升； 第二步:清空6升.把5升容器中的4升倒入6中，此时6升中有4升 第三步:加满5升，倒入6升中使其加满，此时5升中剩3升</p><hr><h4 id="想象一个登录框，包括ID、密码、登录、取消，记住密码（复选框），尽可能的写出你想到的测试点？"><a href="#想象一个登录框，包括ID、密码、登录、取消，记住密码（复选框），尽可能的写出你想到的测试点？" class="headerlink" title="想象一个登录框，包括ID、密码、登录、取消，记住密码（复选框），尽可能的写出你想到的测试点？"></a><span style='color:orange'>想象一个登录框，包括ID、密码、登录、取消，记住密码（复选框），尽可能的写出你想到的测试点？</span></h4><h5 id="ID测试要点："><a href="#ID测试要点：" class="headerlink" title="ID测试要点："></a>ID测试要点：</h5><p>字符类型（包括：数字、字母、汉字、特殊字符）</p><p>字符长度</p><p>默认值</p><p>空值</p><p>字符集</p><p>存在空格</p><p>复制、粘贴</p><h5 id="密码测试要点："><a href="#密码测试要点：" class="headerlink" title="密码测试要点："></a>密码测试要点：</h5><p>密码长度（例如：密码不能少于7个字符，最长不能超过20个字符） 密码复杂度、强度（例如：密码必须包含特殊字符、数字字母大小写等等，长度是否长）</p><p>密码字符类型（例如：只允许输入数字、字母、特殊字符、下划线）</p><p>默认值</p><p>密码为空</p><p>字符集</p><p>存在空格</p><p>复制、粘贴</p><h5 id="登录测试要点："><a href="#登录测试要点：" class="headerlink" title="登录测试要点："></a>登录测试要点：</h5><p>① 用户名和密码都符合要求（格式上的要求）</p><p>② 用户名和密码都不符合要求（格式上的要求）</p><p>③ 用户名符合要求，密码不符合要求（格式上的要求）</p><p>④ 密码符合要求，用户名不符合要求（格式上的要求）</p><p>⑤ 用户名或密码为空</p><p>⑥ 数据库中不存在的用户名，不存在的密码</p><p>⑦ 数据库中存在的用户名，错误的密码</p><p>⑧ 数据库中不存在的用户名，存在的密码</p><p>⑨ 输入的数据前存在空格</p><p>⑩ 输入正确的用户名密码以后按[enter]是否能登陆</p><p>取消</p><p>鼠标左键点击“取消”按钮</p><p>鼠标左键双击“取消”按钮</p><p>鼠标右键点击“取消”按钮</p><p>鼠标右键双击“取消”按钮</p><p>鼠标指针移动到“取消”按钮”，按回车键 鼠标指针停留在“取消”按钮上</p><p>记住密码</p><p>（复选框）</p><p>点击选中“记住密码”按钮，重新登录</p><p>不选中“记住密码”按钮，重新输入密码登录</p><p>输入已存在ID和错误密码，勾选“记住密码”，点击登录 输入错误ID和正确密码，勾选“记住密码”，点击登录 输入正确ID和正确密码，勾选“记住密码”，点击登录 输入错误ID和错误密码，勾选“记住密码”，点击登录.</p><p>1、账号或密码登陆正确或错误时，进入后续页面或弹出反馈内容是否正确？ 2、各类浏览器的各个版本登陆测试兼容性，不同的浏览器有可能会错位显示。 3、电脑和移动设备登陆测试。 4、输入一段如’or’=’or’之类代码作为账号或密码看是否能登陆。 5、登录后，测试不操作后需多长时间会自动注销；退出后，刷新页面检查是否真的退出。</p><hr><h4 id="访问一个完整http请求会经历哪些问题"><a href="#访问一个完整http请求会经历哪些问题" class="headerlink" title="访问一个完整http请求会经历哪些问题?"></a><span style='color:orange'>访问一个完整http请求会经历哪些问题?</span></h4><p>1.域名解析 2.发起TCP的3次握手 3.建立TCP连接后发起http请求 4.服务器端响应http请求，浏览器得到html代码 5.浏览器解析html代码，并请求html代码中的资源 6.浏览器对页面进行渲染呈现给用户。</p><hr><h4 id="https和http请求的区别？"><a href="#https和http请求的区别？" class="headerlink" title="https和http请求的区别？"></a><span style='color:orange'>https和http请求的区别？</span></h4><p>https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</p><p>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p><p>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p><p>  http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议</p><hr><h4 id="http有哪些请求方式，get和post请求有什么区别"><a href="#http有哪些请求方式，get和post请求有什么区别" class="headerlink" title="http有哪些请求方式，get和post请求有什么区别?"></a><span style='color:orange'>http有哪些请求方式，get和post请求有什么区别?</span></h4><p>get传输数据是通过URL请求，以field（字段）= value的形式，置于URL后，并用”?”连接，多个请求数据间用”&amp;”连接，如<a href="http://127.0.0.1/Test/login.action?name=admin&amp;password=admin，这个过程用户是可见的；post传输数据通过Http的post机制，将字段与对应值封存在请求实体中发送给服务器，这个过程对用户是不可见的；" target="_blank" rel="noopener">http://127.0.0.1/Test/login.action?name=admin&amp;password=admin，这个过程用户是可见的；post传输数据通过Http的post机制，将字段与对应值封存在请求实体中发送给服务器，这个过程对用户是不可见的；</a></p><p>  Get传输的数据量小，因为受URL长度限制，但效率较高，Post可以传输大量数据，所以上传文件时只能用Post方式；</p><p> post较get安全性较高，get是不安全的，因为URL是可见的，可能会泄露私密信息，如密码等.</p><p>  get方式只能支持ASCII字符，向服务器传的中文字符可能会乱码，post支持标准字符集，可以正确传递中文字符。</p><hr><h4 id="cookie与session区别"><a href="#cookie与session区别" class="headerlink" title="cookie与session区别?"></a><span style='color:orange'>cookie与session区别?</span></h4><p>cookie数据存放在客户的浏览器上，session数据放在服务器上；</p><p>cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到安全应当使用session；</p><p>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能。考虑到减轻服务器性能方面，应当使用COOKIE；</p><p>单个cookie在客户端的限制是3K，就是说一个站点在客户端存放的COOKIE不能超过3K；</p><p>Cookie和Session的方案虽然分别属于客户端和服务端，但是服务端的session的实现对客户端的cookie有依赖关系的，上面我讲到服务端执行session机制时候会生成session的id值，这个id值会发送给客户端，客户端每次请求都会把这个id值放到http请求的头部发送给服务端，而这个id值在客户端会保存下来，保存的容器就是cookie，因此当我们完全禁掉浏览器的cookie的时候，服务端的session也会不能正常使用。</p><hr><h4 id="http请求和http响应包含哪些内容"><a href="#http请求和http响应包含哪些内容" class="headerlink" title="http请求和http响应包含哪些内容?"></a><span style='color:orange'>http请求和http响应包含哪些内容?</span></h4><p>请求报文包含三部分：</p><p>a、请求行：包含请求方法、URI、HTTP版本信息</p><p>b、请求首部字段</p><p>c、请求内容实体</p><p>响应报文包含三部分：</p><p>a、状态行：包含HTTP版本、状态码、状态码的原因短语</p><p>b、响应首部字段</p><p>c、响应内容实体</p><hr><h4 id="你所熟悉的软件测试类型有哪些"><a href="#你所熟悉的软件测试类型有哪些" class="headerlink" title="你所熟悉的软件测试类型有哪些?"></a><span style='color:orange'>你所熟悉的软件测试类型有哪些?</span></h4><p>测试类型有：功能测试、性能测试、界面测试</p><p>功能测试在测试工作中占有比例最大，功能测试也叫黑盒测试。</p><p>性能测试是通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试。负载测试和压力测试都属于性能测试，两者可以结合进行。</p><p>界面测试，界面是软件与用户交互的最直接的层，界面的好坏决定用户对软件的第一印象。</p><p>区别在于，功能测试关注产品的所有功能，要考虑到每个细节功能，每个可能存在的功能问题。性能测试主要关注产品整体的多用户并发下的稳定性和健壮性。界面测试则关注与用户体验相关内容，用户使用该产品的时候是否已用，是否易懂，是否规范(用户无意输入无效的数据，当然考虑到体验性，不能太粗鲁的弹出警告)。做某个性能测试的时候，首先它可能是个功能点，首先要保证她的功能是没有问题的，然后再考虑性能的问题。</p><hr><h4 id="接口测试用例的编写要点有哪些？"><a href="#接口测试用例的编写要点有哪些？" class="headerlink" title="接口测试用例的编写要点有哪些？"></a><span style='color:orange'>接口测试用例的编写要点有哪些？</span></h4><p>1、测试每个参数类型不合法的情况(类型不合法容易遗漏null型)</p><p>2、测试每个参数取值范围不合法的情况</p><p>3、测试参数为空的情况</p><p>4、测试参数前后台定义的一致性</p><p>5、 测试每个参数的上下限(这里容易出现致命的BUG，如果程序处理不当，可能会程序导致崩溃)</p><p>6、如果两个请求有严格的先后顺序，需要测试调转顺序的情况</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;声明:以下是我在查资料学习软件测试面试过程中觉得很有用的资料，来自于微信公众号“软件测试资源分享”的面试题整理，自己也想收录能够及时复习，所以将以下整理在这，因为才加入博客很多规则不清楚，如果有侵权可以联系我及时处理。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;您认为做好测试用例设
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Win10+Hexo+GitHub搭建个人博客详解</title>
    <link href="http://yoursite.com/2019/08/13/Win10+Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/13/Win10+Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E8%A7%A3/</id>
    <published>2019-08-13T01:01:10.000Z</published>
    <updated>2019-12-28T07:14:29.023Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章作者：易明<br>简书主页：<a href="https://www.jianshu.com/u/6ebea55f5cec" target="_blank" rel="noopener">https://www.jianshu.com/u/6ebea55f5cec</a></p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>&#160; &#160; &#160;&#160; 最近，在简书上写了几篇博客，发现简书可能没做反扒机制，导致简书被盗文的情况屡见不鲜。于是，决定搭建属于自己的个人博客。通过调研，尝试了下Win10+Hexo+GitHub的组合，成功搭建了自己的博客，以下为详细步骤。</p><h1 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h1><p>1、Node.js下载和安装：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br><img src="https://github.com/yiming1012/resource/blob/master/nodejs.png?raw=true" alt="image.png"></p><p>2、Git下载和安装：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a><br><img src="https://github.com/yiming1012/resource/blob/master/git.png?raw=true" alt="image.png"></p><p>3、GitHub注册和创建仓库：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br>在GitHub账号创建成功之后，需要创建一个仓库来管理自己的文件。<br>(1) 点击个人主页右上角“<code>+</code>”里面的<code>New repository</code><br><img src="https://github.com/yiming1012/resource/blob/master/newrepository.png?raw=true" alt="image.png"><br>(2) 输入Repository name：<code>用户名.github.io</code>，注意：<code>用户名一定要和注册的用户名一样</code><br><img src="https://github.com/yiming1012/resource/blob/master/createnewres.png?raw=true" alt="image.png"></p><p>4、配置SSH免密登录<br>（1）在桌面点击鼠标右键，选择”Git Bash Here”，打开Git Bash终端。<br>（2）设置user name和email：</p><blockquote><p>git config –global user.name “GitHub用户名”<br>git config –global user.email “GitHub注册邮箱”          </p></blockquote><p>（3）生成SSH密钥</p><blockquote><p>ssh-keygen -t rsa -C “GitHub注册邮箱”</p></blockquote><p>（4）输入命令后直接回车即可，在C盘的用户目录下会生成<code>.ssh</code>文件夹（我电脑上的目录为<code>C:\Users\yiming\.ssh</code>），里面有私钥<code>id_rsa</code>和公钥<code>id_rsa_pub</code>。</p><p>（5）在GitHub上添加SSH keys。具体步骤是点击GitHub头像下的<code>Settings</code>-&gt;<code>SSH and GPG keys</code>-&gt;<code>New SSH key</code>，将本地的公钥<code>id_rsa_pub</code>内容复制粘贴到其中即可。<br><img src="https://github.com/yiming1012/resource/blob/master/settings.png?raw=true" alt="image.png"><br><img src="https://github.com/yiming1012/resource/blob/master/ssh.png?raw=true" alt="image.png"></p><p>（6）验证SSH免密是否成功</p><blockquote><p>ssh -T <a href="mailto:git@github.com">git@github.com</a></p></blockquote><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>1、进入cmd命令行，创建一个本地仓库，比如在D盘创建一个blog文件夹，切换到blog目录</p><blockquote><p>D:    //进入D盘<br>mkdir blog //创建blog目录<br>cd blog //切换到blog目录</p></blockquote><p>2、使用<code>淘宝</code>的npm源安装hexo</p><blockquote><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>cnpm install hexo-cli -g<br>cnpm install hexo –save</p></blockquote><p>3、在blog目录下点击鼠标右键，打开“<code>Git Bash</code>”终端，<code>如果在其他地方打开Git Bash终端，会出现：hexo：commad not found</code> 。初始化hexo：</p><blockquote><p>hexo init</p></blockquote><p>4、安装依赖及相关插件</p><blockquote><p>cnpm install </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-generator-index --save</span><br><span class="line">cnpm install hexo-generator-archive --save</span><br><span class="line">cnpm install hexo-generator-category --save</span><br><span class="line">cnpm install hexo-generator-tag --save</span><br><span class="line">cnpm install hexo-server --save</span><br><span class="line">cnpm install hexo-deployer-git --save</span><br><span class="line">cnpm install hexo-deployer-heroku --save</span><br><span class="line">cnpm install hexo-deployer-rsync --save</span><br><span class="line">cnpm install hexo-deployer-openshift --save</span><br><span class="line">cnpm install hexo-renderer-marked@0.2 --save</span><br><span class="line">cnpm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">cnpm install hexo-generator-feed@1 --save</span><br><span class="line">cnpm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure><p>5、启动Hexo</p><blockquote><p>hexo server   （或者hexo s）</p></blockquote><p><img src="https://github.com/yiming1012/resource/blob/master/hexocommand.png?raw=true" alt="image.png"></p><p>6、在浏览器中输入：<code>localhost:4000</code>，可以看到Hexo的示例页面<br><img src="https://github.com/yiming1012/resource/blob/master/hexoblog.png?raw=true" alt="image.png"></p><h1 id="将博客部署到GitHub"><a href="#将博客部署到GitHub" class="headerlink" title="将博客部署到GitHub"></a>将博客部署到GitHub</h1><p>1、配置文件以关联远程仓库，在blog目录下找到<code>_config.yml</code>文件，用文本编辑器Nodepad ++或Sublime Text打开，在最下方添加远程仓库地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#Deployment</span><br><span class="line">##Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  #yiming1012改为你的github用户名（请修改）</span><br><span class="line">  repository: https:&#x2F;&#x2F;github.com&#x2F;yiming1012&#x2F;yiming1012.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>2、新建博客，在<code>D:\blog\source\_posts</code>目录下会生成firstblog.md的文件</p><blockquote><p>hexo new “firstblog”</p></blockquote><p>3、你可以根据Markdown语法来编辑上面的文件<br><img src="https://github.com/yiming1012/resource/blob/master/Markdownfile.png?raw=true" alt="博客内容.png"><br>4、设置身份信息</p><blockquote><p>git config –global user.name “GitHub用户名”<br>git config –global user.email “GitHub注册邮箱” </p></blockquote><p>5、部署到GitHub</p><blockquote><p>hexo deploy （可以简写为：hexo d）</p></blockquote><p>6、在浏览器上输入：<code>用户名.github.io</code>（我的是yiming1012.github.io）即可看到刚才写的博客已提交到仓库<br><img src="https://github.com/yiming1012/resource/blob/master/gitresult.png?raw=true" alt="blog.png"></p><p>7、一个简单的博客就搭建起来了，后续还有待完善……<code>修改Hexo主题</code>请参见我的下一篇文章：<a href="https://www.jianshu.com/p/869c6bcd0647" target="_blank" rel="noopener">https://www.jianshu.com/p/869c6bcd0647</a></p><h1 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h1><blockquote><p>1.<a href="https://hujichn.github.io/2016/04/06/Win10%E4%B8%8A%E5%88%A9%E7%94%A8github+hexo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%B9%E6%B3%95/](https://hujichn.github.io/2016/04/06/Win10%E4%B8%8A%E5%88%A9%E7%94%A8github+hexo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%B9%E6%B3%95/)" target="_blank" rel="noopener">https://hujichn.github.io/2016/04/06/Win10%E4%B8%8A%E5%88%A9%E7%94%A8github+hexo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%B9%E6%B3%95/](https://hujichn.github.io/2016/04/06/Win10%E4%B8%8A%E5%88%A9%E7%94%A8github+hexo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%B9%E6%B3%95/)</a><br>2.<a href="https://zhuanlan.zhihu.com/p/22405775" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/22405775</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;文章作者：易明&lt;br&gt;简书主页：&lt;a href=&quot;https://www.jianshu.com/u/6ebea55f5cec&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/u/6e
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>firstblog</title>
    <link href="http://yoursite.com/2019/08/12/firstblog/"/>
    <id>http://yoursite.com/2019/08/12/firstblog/</id>
    <published>2019-08-12T12:28:18.000Z</published>
    <updated>2019-12-28T07:14:29.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="当当的第一篇测试博客"><a href="#当当的第一篇测试博客" class="headerlink" title="当当的第一篇测试博客"></a>当当的第一篇测试博客</h1><p>123123123123</p><h2 id="当当的第一篇测试博客-1"><a href="#当当的第一篇测试博客-1" class="headerlink" title="当当的第一篇测试博客"></a>当当的第一篇测试博客</h2><p>234234234234</p><h3 id="当当的第一篇测试博客-2"><a href="#当当的第一篇测试博客-2" class="headerlink" title="当当的第一篇测试博客"></a>当当的第一篇测试博客</h3><h4 id="当当的第一篇测试博客-3"><a href="#当当的第一篇测试博客-3" class="headerlink" title="当当的第一篇测试博客"></a>当当的第一篇测试博客</h4><p><img src="yfpicyure/pig.jpg" alt="bp">  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;当当的第一篇测试博客&quot;&gt;&lt;a href=&quot;#当当的第一篇测试博客&quot; class=&quot;headerlink&quot; title=&quot;当当的第一篇测试博客&quot;&gt;&lt;/a&gt;当当的第一篇测试博客&lt;/h1&gt;&lt;p&gt;123123123123&lt;/p&gt;
&lt;h2 id=&quot;当当的第一篇测试博客-1&quot;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
